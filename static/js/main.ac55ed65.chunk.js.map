{"version":3,"sources":["Header.js","Top-Sidebar.js","MapDiv.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","TopSidebar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateQuery","query","setState","filteredLocations","markers","forEach","marker","setMap","filterMarkers","_this$props","map","location","title","toLowerCase","match","toggleIcon","icon","showLocations","state","showOnClick","e","filterLocations","_this2","localArts","filter","localArt","venue","name","indexOf","role","aria-label","tabIndex","aria-pressed","style","color","cursor","type","value","onClick","placeholder","onChange","event","target","key","id","listItemClick","Component","MapContainer","_Component","apply","arguments","inherits","createClass","App","infowindow","loadMap","url","index","window","document","getElementsByTagName","scriptKey","onerror","alert","src","async","defer","parentNode","insertBefore","getScriptURL","initMap","getLocalArts","axios","get","URLSearchParams","client_id","client_secret","v","section","near","limit","then","response","data","groups","items","catch","error","google","maps","Map","getElementById","center","lat","lng","zoom","InfoWindow","art","contentString","concat","address","Marker","position","animation","Animation","DROP","setContent","open","getAnimation","setAnimation","BOUNCE","setTimeout","addListener","myMarkers","myMap","console","log","src_Header","Top_Sidebar","MapDiv","Boolean","hostname","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac55ed65.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Header = () => {\r\n      return(\r\n        <div className='header'>\r\n          <h1 className='lrg-text'>\r\n            Art & Entertainment, Redlands CA\r\n          </h1>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Header;\r\n","import React, {Component} from 'react';\r\n\r\n\r\nclass TopSidebar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            query: '',\r\n            showLocations: true,\r\n            filteredLocations: []\r\n\r\n        }\r\n    }\r\n\r\n\r\n    updateQuery = (query) => {\r\n        this.setState({\r\n            query: query\r\n        })\r\n    }\r\n\r\n//Filtered by search input\r\n    filteredLocations = (query) => {\r\n        this.setState({query})\r\n\r\n// Clear all markers\r\n        this.props.markers.forEach(marker => marker.setMap(null));\r\n        this.filterMarkers(query);\r\n    };\r\n\r\n\r\n//Markers filtered by search input\r\n    filterMarkers = query => {\r\n      let {markers, map} = this.props;\r\n\r\n      markers.forEach(location => {\r\n        if (location.title.toLowerCase().match(query) !== null) {\r\n            location.setMap(map);\r\n          } else {\r\n            return null\r\n          }\r\n        });\r\n    }\r\n\r\n\r\n    toggleIcon = (icon) => {\r\n        this.setState({showLocations: !this.state.showLocations})\r\n    }\r\n\r\n    showOnClick = e => {\r\n        this.setState({filterLocations: !this.state.filterLocations})\r\n    }\r\n\r\n\r\n    render() {\r\n        let {localArts} = this.props\r\n        let filterLocations = localArts.filter((localArt) => {\r\n            return localArt.venue.name.toLowerCase().indexOf(this.state.query.toLowerCase()) !== -1\r\n\r\n        })\r\n\r\n\r\n        return (\r\n            <div className='options'>\r\n                <h2 className='top-sidebar'>Art and Theater</h2>\r\n                <nav className='drop-down-filter' role='navigation'>\r\n                    <button className='button' aria-label='toggle list-items'>\r\n                        <i className='fas fa-arrow-alt-circle-up' tabIndex='0'\r\n                           aria-pressed='true'\r\n                           style={{color: '#0B3C5D', cursor: 'pointer'}} type='button' role='button'\r\n                           value='Hide options' onClick={this.toggleIcon}/>\r\n\r\n                        <i className='fas fa-arrow-alt-circle-down'\r\n                           aria-pressed='false'\r\n                           style={{color: '#0B3C5D', cursor: 'pointer'}} type='button'\r\n                           value='Show options' onClick={this.toggleIcon}/>\r\n                    </button>\r\n                    <input className='see-options' type='text' placeholder='Filter Results' value={this.state.query}\r\n                           onChange={(event) => {\r\n                               this.filteredLocations(event.target.value)\r\n                           }}/>\r\n\r\n\r\n\r\n                <div className='show-locations' >\r\n\r\n                    {this.state.showLocations ? (\r\n\r\n                        <ul className='list-museums'>\r\n\r\n                            {filterLocations.map((localArt) => {\r\n                                return (\r\n\r\n                                    <li key={localArt.venue.id} className='list-item'>\r\n\r\n                                      <button aria-label='Location on map' className='list-item' tabIndex='0'\r\n                                        onClick={() => this.props.listItemClick(localArt.venue.name)}\r\n                                        >\r\n                                        {localArt.venue.name}\r\n                                      </button>\r\n                                    </li>\r\n\r\n                                )\r\n                            })}\r\n\r\n                        </ul>\r\n\r\n                    ) : null\r\n                  }\r\n\r\n                </div>\r\n                  </nav>\r\n                <h6>Location information sourced via Foursquare</h6>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopSidebar;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nexport class MapContainer extends Component {\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <main>\r\n\r\n          <div id=\"map\" aria-label='Map of Redlands, CA' role='application'>\r\n\r\n          </div>\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default MapContainer;\r\n","import React, {Component} from 'react';\nimport Header from './Header'\nimport TopSidebar from './Top-Sidebar'\nimport MapDiv from './MapDiv'\nimport './index.css'\nimport axios from 'axios'\n\n//******Attrubution and kindly offered assisstance******\n//Neighborhood Map by Yahya Elharony, YouTube\n//LevelUp Tuts=Building a Search Function, YouTube\n//Ryan Waite=Coding Session, YouTube\n//Google @ https://developers.google.com/maps/documentation/javascript/tutorial\n//Neighborhood Map by Forreest Walker, YouTube\n// Kind assistance and guidance from @Lloan Alas, student mentor\n\n\nclass App extends Component {\n\n\n        markers = null;\n        state = {\n            infowindow: null,\n            localArts: [],\n            markers: [],\n            map: null,\n        }\n\n\n\n    componentDidMount() {\n\n      this.getLocalArts()\n      setTimeout(function(){\n        if(window.google) {\n          console.log(\"maps work\");\n          } else {\n            alert('Sorry, there seems to be an error');} }, 2000);\n    }\n\n    loadMap = () => {\n        getScriptURL('https://maps.googleapis.com/maps/api/js?client=gme-nianticinc&v=weekly&libraries=geometry,drawing,places&callback=initMap')\n        window.initMap = this.initMap\n    }\n\n//Retrieve locations from Foursquare\n    getLocalArts = () => {\n        const endPoint = 'https://api.foursquare.com/v2/venues/explore?'\n        const parameters = {\n            client_id: '2VFYWEPSFX3JFVVNQEN1GQMJBLS42U3YXFG4ARNWQ2IFPXHB',\n            client_secret: 'I4VFI4PA3W1ZQRCFPKKSEN45ZYV0DM3I2AOHQOSGADY41EOH',\n            v: '20181015',\n            section: 'arts',\n            near: 'Redlands, CA',\n            limit: 15\n\n        }\n        axios.get(endPoint + new URLSearchParams(parameters))\n            .then(response => {\n                this.setState({\n                    localArts: response.data.response.groups[0].items\n                }, this.loadMap())\n            })\n            .catch = (error) => {\n            alert(error + ': Sorry, there seems to be an error')\n        }\n    }\n\n    initMap = () => {\n        const map = new window.google.maps.Map(document.getElementById('map'), {\n            center: {lat: 34.059270, lng: -117.214530},\n            zoom: 13\n\n        });\n\n\n\n        const infowindow = new window.google.maps.InfoWindow()\n\n        let markers = this.state.localArts.map(art => {\n            let contentString = `<div role='dialog' aria-labelledby='dialog-title' type='modal'><h4><strong>${art.venue.name}</strong></h4> <br>  <p>${art.venue.location.address}</p></div>`\n            let marker = new window.google.maps.Marker({\n                position: {lat: art.venue.location.lat, lng: art.venue.location.lng},\n                map: map,\n                animation: window.google.maps.Animation.DROP,\n                title: art.venue.name\n            });\n//Tie infowindow to markers\n            marker.contentString = () => {\n\n                infowindow.setContent(contentString)\n                infowindow.open(map, marker)\n                marker.getAnimation() !== null ?\n                    marker.setAnimation(null) :\n                    marker.setAnimation(window.google.maps.Animation.BOUNCE)\n                setTimeout(() => {\n                    marker.setAnimation(null)\n                }, 1000)\n              }\n\n              marker.addListener('click', function () {\n                marker.contentString();\n            });\n\n            return marker;\n\n        });\n\n        this.setState({\n            markers: markers,\n            map: map,\n            InfoWindow: infowindow\n        })\n\n        window.myMarkers = markers;\n        window.myMap = map;\n    };\n\n//Click event in sidebar\n    listItemClick =  (location) => {\n        this.state.markers.forEach(marker => {\n            if (marker.title.toLowerCase() === location.toLowerCase()){\n                marker.contentString();\n            } else {\n              return null\n            }\n          });\n    }\n\n\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header/>\n                <div className='wide-view'>\n                    <TopSidebar\n                        localArts={this.state.localArts}\n                        markers={this.state.markers}\n                        listItemClick={this.listItemClick}\n                        map={this.state.map}\n                    />\n                    <MapDiv\n                        markers={this.state.markers}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\n//A-sync behavior retrieving map\nfunction getScriptURL(url) {\n    const index = window.document.getElementsByTagName('script')[0]\n    const scriptKey = window.document.createElement('script')\n    scriptKey.onerror = function () {handleError()}\n    scriptKey.src = url\n    scriptKey.async = true\n    scriptKey.defer = true\n    index.parentNode.insertBefore(scriptKey, index)\n}\nfunction handleError() {\n  alert('The image could not be loaded.')\n}\n\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}